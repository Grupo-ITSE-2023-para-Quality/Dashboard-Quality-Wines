generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String       @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  billboards Billboard[]  @relation("StoreToBillboard")
  categories Category[]   @relation("StoreToCategory")
  orders     Order[]      @relation("StoreToOrder")
  products   Product[]    @relation("StoreToProduct")
  sizes      Size[]       @relation("StoreToSize")
  flavors    Flavor[]     @relation("StoreToFlavor")
  subs       Subscriber[] @relation("StoreToSubscriber")
  supliers   Suplier[]    @relation("StoreToSuplier")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  flavors     Flavor[]  @relation("CategoryToFlavor")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Flavor {
  id         String    @id @default(uuid())
  storeId    String
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId String
  products   Product[]
  store      Store     @relation("StoreToFlavor", fields: [storeId], references: [id])
  category   Category  @relation("CategoryToFlavor", fields: [categoryId], references: [id])

  @@index([storeId])
  @@index([categoryId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  categoryId  String
  name        String
  description String?     @db.Text
  price       Int
  stock       Int         @default(0)
  minStock    Int         @default(5)
  inStock     Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String?
  flavorId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  images      Image[]
  OrderItem   OrderItem[]
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size        Size?       @relation(fields: [sizeId], references: [id])
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  flavor      Flavor?     @relation(fields: [flavorId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([flavorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  isPaid     Boolean     @default(false)
  name       String      @default("")
  lastName   String      @default("")
  phone      String      @default("")
  email      String?     @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     String      @default("Pendiente")
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Subscriber {
  id      String @id @default(uuid())
  storeId String
  email   String @unique
  store   Store  @relation("StoreToSubscriber", fields: [storeId], references: [id])

  @@index([storeId])
}

model Suplier {
  id         String   @id @default(uuid())
  storeId    String
  empresa    String
  localidad  String
  telefono   String
  email      String?
  comentario String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  store      Store    @relation("StoreToSuplier", fields: [storeId], references: [id])

  @@index([storeId])
}
